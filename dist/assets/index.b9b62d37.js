import{d as e,W as n,B as o,c as t,r,o as c,a,b as i,e as d,w as s,f as l,t as u,g as w}from"./vendor.1a47d282.js";!function(e=".",n="__import__"){try{self[n]=new Function("u","return import(u)")}catch(o){const t=new URL(e,location),r=e=>{URL.revokeObjectURL(e.src),e.remove()};self[n]=e=>new Promise(((o,c)=>{const a=new URL(e,t);if(self[n].moduleMap[a])return o(self[n].moduleMap[a]);const i=new Blob([`import * as m from '${a}';`,`${n}.moduleMap['${a}']=m;`],{type:"text/javascript"}),d=Object.assign(document.createElement("script"),{type:"module",src:URL.createObjectURL(i),onerror(){c(new Error(`Failed to import: ${e}`)),r(d)},onload(){o(self[n].moduleMap[a]),r(d)}});document.head.appendChild(d)})),self[n].moduleMap={}}}("/assets/");const m={name:"Loading...",connected:!1,chainId:0,address:"",block:0,connect:function(){var e;this.connected&&(null==(e=window.ethereum)||e.enable())}};var h=e({name:"Web3",props:{info:{type:Object,required:!0}},setup:e=>{if(window.ethereum){let t=function(e){c(e.chainId)},r=function(n){n&&n.length?e.info.address=n[0]:e.info.address=""},c=function(t){var c,a;e.info.chainId=Number(o.from(t)),e.info.connected=window.ethereum.isConnected(),null==(c=window.provider)||c.off("block"),window.provider=new n(window.ethereum),window.ethereum.request({method:"eth_accounts"}).then(r),null==(a=window.provider)||a.getBlockNumber().then((n=>{var o;e.info.block=n,null==(o=window.provider)||o.on("block",(n=>{e.info.block=n}))}))};window.provider=new n(window.ethereum),window.ethereum.isMetaMask?e.info.name="MetaMask":e.info.name="Other",window.ethereum.autoRefreshOnNetworkChange=!1,window.ethereum.on("accountsChanged",r),window.ethereum.on("chainChanged",c),window.ethereum.on("connect",t),window.ethereum.on("disconnect",(n=>{e.info.connected=!1,e.info.block=0})),e.info.connected=window.ethereum.isConnected(),e.info.connected&&t({chainId:window.ethereum.chainId})}else e.info.name="None";return{}}});h.render=function(e,n,o,a,i,d){return c(),t("div",null,[e.info.connected?e.info.connected&&!e.info.address?r(e.$slots,"connect",{key:1}):r(e.$slots,"default",{key:2}):r(e.$slots,"none",{key:0})])};var f=e({name:"App",components:{Web3:h},setup:()=>({web3:a(m)})});const p=i("img",{alt:"Dictator DAO Logo",src:"/assets/logo.3f41d6b2.jpeg",height:"180"},null,-1),b=i("h1",null,"Dictator DAO",-1),k=i("p",null," Dictator DAO is an organization where the token holders democratically elect a 'dictator' to operate the protocol. Whenever the DAO isn't happy, they can simply elect a new 'dictator'. ",-1),v=l(" No web3 provider was found. Please use MetaMask. "),g=i("br",null,null,-1),M=i("br",null,null,-1),y=i("br",null,null,-1),C=i("br",null,null,-1);f.render=function(e,n,o,r,a,w){const m=d("Web3");return c(),t("div",null,[p,b,k,i(m,{info:e.web3},{none:s((()=>[v])),connect:s((()=>[i("button",{onClick:n[1]||(n[1]=(...n)=>e.web3.connect&&e.web3.connect(...n))},"Connect Metamask")])),default:s((()=>[l(" Name: "+u(e.web3.name),1),g,l(" Connected: "+u(e.web3.connected),1),M,l(" Address: "+u(e.web3.address),1),y,l(" ChainId: "+u(e.web3.chainId),1),C,l(" Block: "+u(e.web3.block),1)])),_:1},8,["info"])])},w(f).mount("#app");
